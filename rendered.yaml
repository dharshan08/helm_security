---
# Source: keycloak/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 7800
        - port: 8080
        - port: 8443
---
# Source: keycloak/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
---
# Source: keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: false
---
# Source: keycloak/templates/secret-external-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-externaldb
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
type: Opaque
data:
  db-password: "a2V5Y2xvYWs="
---
# Source: keycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "YWRtaW4="
---
# Source: keycloak/templates/tls-pass-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-tls-passwords
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  tls-keystore-password: "Y2hhbmdlaXQ="
  tls-truststore-password: "Y2hhbmdlaXQ="
---
# Source: keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-env-vars
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
data:
  KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY_HEADERS: ""
  KEYCLOAK_HOSTNAME: |-
    https://identity.virtual33.myguest.virtualbox.org/
  KEYCLOAK_HOSTNAME_STRICT: "false"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "identitydb-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "keycloak"
  KEYCLOAK_DATABASE_USER: "keycloak"
  KEYCLOAK_PRODUCTION: "false"
  KEYCLOAK_ENABLE_HTTPS: "true"
  KEYCLOAK_HTTPS_PORT: "8443"
  KEYCLOAK_HTTPS_USE_PEM: "false"
  KEYCLOAK_HTTPS_KEY_STORE_FILE: "/opt/bitnami/keycloak/certs/keycloak.server.keystore.p12"
  KEYCLOAK_HTTPS_TRUST_STORE_FILE: "/opt/bitnami/keycloak/certs/keycloak.client.truststore.p12"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=keycloak-headless.opa.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KEYCLOAK_LOG_LEVEL: "INFO"
---
# Source: keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
      nodePort: null
  selector:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 4ed96e2755cdb2dd8cbfe605f0d7d96751966d559993e7038dd30bb0ff2cf1eb
        checksum/secrets: fc1f4cae7d5c3675db69916370f50ceece34d80ce11f9d3f5095a868eb560749
      labels:
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 26.1.3
        helm.sh/chart: keycloak-24.4.11
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/app-version: 26.1.3
    spec:
      serviceAccountName: keycloak
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: keycloak
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      initContainers:
        - name: prepare-write-dirs
          image: docker.io/bitnami/keycloak:26.1.3-debian-12-r0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - |
              . /opt/bitnami/scripts/liblog.sh

              info "Copying writable dirs to empty dir"
              # In order to not break the application functionality we need to make some
              # directories writable, so we need to copy it to an empty dir volume
              cp -r --preserve=mode /opt/bitnami/keycloak/lib/quarkus /emptydir/app-quarkus-dir
              cp -r --preserve=mode /opt/bitnami/keycloak/data /emptydir/app-data-dir
              cp -r --preserve=mode /opt/bitnami/keycloak/providers /emptydir/app-providers-dir
              info "Copy operation completed"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 512Mi
          volumeMounts:
           - name: empty-dir
             mountPath: /emptydir
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:26.1.3-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-externaldb
                  key: db-password
            - name: KEYCLOAK_HTTPS_KEY_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-tls-passwords
                  key: "tls-keystore-password"
            - name: KEYCLOAK_HTTPS_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-tls-passwords
                  key: "tls-truststore-password"
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            - name: KC_SPI_ADMIN_REALM
              value: "master"
            - name: KC_KEYSTORE_PASSWORD
              value: changeit
            - name: KC_HOSTNAME
              value: keycloak
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_HTTPS_CLIENT_AUTH
              value: request
          envFrom:
            - configMapRef:
                name: keycloak-env-vars
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 512Mi
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: discovery
              containerPort: 7800
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /realms/master
              port: https
            initialDelaySeconds: 30
            periodSeconds: 10
            scheme: HTTPS
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /realms/master
              port: https
            initialDelaySeconds: 30
            periodSeconds: 10
            scheme: HTTPS
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /bitnami/keycloak
              subPath: app-volume-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/lib/quarkus
              subPath: app-quarkus-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/data
              subPath: app-data-dir
            - name: empty-dir
              mountPath: /opt/bitnami/keycloak/providers
              subPath: app-providers-dir
            - name: certificates
              mountPath: /opt/bitnami/keycloak/certs
              readOnly: true
            - mountPath: /etc/x509/https
              name: keycloak-certs
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: certificates
          secret:
            secretName: keycloak-certs
            defaultMode: 420
        - name: keycloak-certs
          secret:
            secretName: keycloak-certs
---
# Source: keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keycloak
  namespace: "opa"
  labels:
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.1.3
    helm.sh/chart: keycloak-24.4.11
    app.kubernetes.io/component: keycloak
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  ingressClassName: "traefik"
  rules:
    - host: "identity.virtual33.myguest.virtualbox.org"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: keycloak
                port:
                  name: http
